AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy a Lambda function

Parameters:
  S3BucketName:
    Description: 'Lambda source bucket'
    Type: 'String'
  S3Key:
    Description: 'Lambda source path'
    Type: 'String'

Resources:

  WeightsLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'weights-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource: !Sub 'arn:aws:dynamodb:us-east-1:${AWS::AccountId}:table/*'

  WeightsLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'weights-lambda'
      Handler: 'weights-api.request_handler'
      Role: !GetAtt WeightsLambdaRole.Arn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3Key
      Runtime: 'python3.8'
      Timeout: 10

  ProxyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'weights-api'
      EndpointConfiguration:
        Types:
          - REGIONAL

  Method:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !GetAtt ProxyApi.RootResourceId
      RestApiId: !Ref ProxyApi
      AuthorizationType: NONE
      Integration:
        Credentials: !GetAtt InvokeFunctionRole.Arn
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WeightsLambdaFunction.Arn}/invocations
        IntegrationHttpMethod: POST

  Deployment:
    DependsOn: Method
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ProxyApi
      StageName: test

  InvokeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'InvokeLambdaProxyPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt WeightsLambdaFunction.Arn

Outputs:
  LambdaFunctionArn:
    Description: 'ARN of the deployed Lambda function'
    Value: !GetAtt WeightsLambdaFunction.Arn
