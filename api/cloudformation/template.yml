AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy a Lambda function

Parameters:
  S3BucketName:
    Description: 'Lambda source bucket'
    Type: 'String'
  S3Key:
    Description: 'Lambda source path'
    Type: 'String'

Resources:

  WeightsLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'weights-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource: !Sub 'arn:aws:dynamodb:us-east-1:${AWS::AccountId}:table/*'

  WeightsLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'weights-lambda'
      Handler: 'weights-api.request_handler'
      Role: !GetAtt WeightsLambdaRole.Arn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3Key
      Runtime: 'python3.8'
      Timeout: 10

  WeightsLambdaCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: WeightsLambdaFunction
    Properties:
      LogGroupClass: STANDARD
      LogGroupName: !Sub '/aws/lambda/${WeightsLambdaFunction}'
      RetentionInDays: 7

  ProxyHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: 'cloudformation-weights-http-api'
      ProtocolType: HTTP

  ProxyHttpLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ProxyHttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt WeightsLambdaFunction.Arn
      PayloadFormatVersion: '2.0'

  ProxyHttpRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ProxyHttpApi
      RouteKey: "ANY /{weights+}"
      Target: !Join 
        - "/"
        - - "integrations"
          - !Ref ProxyHttpLambdaIntegration

  ProxyHttpDevStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ProxyHttpApi
      StageName: dev
      AutoDeploy: true

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref WeightsLambdaFunction
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ProxyHttpApi}/*/*"

